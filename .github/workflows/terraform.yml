# Pipeline to build and deploy the terraform for a specific environment
---
name: 6. deploy terraform

env:
  TF_STATE_PATH: peng/adplatform-web-portal
  GITHUB_OWNER: cartologyau
  #GITHUB_TOKEN: ${{secrets.CART_GITHUB_TOKEN}}
  GITHUB_SSHKEY: ${{secrets.SSH_PRIVATE_KEY}}
  APP_PROJECT_NAME: |
    ${{fromJSON('
      {
        "development": "gcp-wow-cart-apps-dev-28f0",
        "dory-dev": "cart-apps-dory-dev-98d6",
        "nemo-dev": "cart-apps-nemo-dev-895a",
        "test": "gcp-wow-cart-apps-test-5ec2",
        "nonprod": "gcp-wow-cart-apps-nonprod-66ca",
        "production": "gcp-wow-cart-apps-prod-1e93"
      }')[inputs.ENVIRONMENT]}}
  APP_PROJECT_ID: |
    ${{fromJSON('
      {
        "development": "699012770206",
        "dory-dev": "290901608746",
        "nemo-dev": "90520429778",
        "test": "743343070162",
        "nonprod": "201908505250",
        "production": "84572544135"
      }')[inputs.ENVIRONMENT]}}
on:
  workflow_dispatch:
    inputs:
      ENVIRONMENT:
        type: choice
        description: "Select the Environment to deploy"
        required: true
        options:
          - development
          - dory-dev
          - nemo-dev
          - test
          - nonprod
        default: "development"
      DRY_RUN:
        type: choice
        description: "Test run only?"
        required: true
        options:
          - "yes"
          - "no"
      RUN_VALIDATE:
        type: choice
        description: "Run terraform validate?"
        required: true
        options:
          - "yes"
          - "no"
      ENV_SUFFIX:
        type: choice
        description: "Environment suffix for dev and test"
        required: true
        options:
          - "MAIN"
          - "-alpha"
          - "-bravo"

  workflow_call:
    inputs:
      ENVIRONMENT:
        type: string
        description: "Environment to deploy"
        required: true
        default: development

      DRY_RUN:
        type: string
        description: "Test run only?"
        required: false
        default: "yes"

      RUN_VALIDATE:
        type: string
        description: "run validations?"
        required: false
        default: "yes"

      ENV_SUFFIX:
        type: string
        description: "Environment suffix for dev and test"
        required: false
        default: "MAIN"

jobs:
  env_to_output:
    name: Prepare env vars
    runs-on: ubuntu-latest
    outputs:
      ENV_SUFFIX: ${{ steps.prepare_env_step.outputs.ENV_SUFFIX }}
      TF_STATE_PATH: ${{ steps.prepare_env_step.outputs.TF_STATE_PATH }}
      APP_PROJECT_NAME: ${{ steps.prepare_env_step.outputs.APP_PROJECT_NAME }}
      APP_PROJECT_ID: ${{ steps.prepare_env_step.outputs.APP_PROJECT_ID }}

    steps:
      - id: prepare_env_step
        run: |
          if [ "${{inputs.ENV_SUFFIX}}" = "MAIN" ]; then
            ENV_SUFFIX=""
          else
            ENV_SUFFIX="${{inputs.ENV_SUFFIX}}"
          fi
          echo "ENV_SUFFIX=${ENV_SUFFIX}" >> $GITHUB_OUTPUT
          echo "TF_STATE_PATH=${TF_STATE_PATH}${ENV_SUFFIX}" >> $GITHUB_OUTPUT
          echo "APP_PROJECT_NAME=${APP_PROJECT_NAME}" >> $GITHUB_OUTPUT
          echo "APP_PROJECT_ID=${APP_PROJECT_ID}" >> $GITHUB_OUTPUT

  # This step creates the *.auto.tfvars files for use in the planning and applying stages
  # later, in the upload steps later you can add whatever extra paths you want to.
  create_tfvars_file:
    name: Create tfvar files
    needs: [env_to_output]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Creating var files
        run: |-
          rm -f auto.tfvars
          echo 'suffix="${{needs.env_to_output.outputs.ENV_SUFFIX}}"' >> auto.tfvars
          echo 'environment="${{inputs.ENVIRONMENT}}"'            >> auto.tfvars
          mv auto.tfvars ${{inputs.ENVIRONMENT}}.auto.tfvars
      - name: Saving tfvar files
        uses: actions/upload-artifact@v3
        with:
          name: ${{inputs.ENVIRONMENT}}.auto.tfvars
          path: |
            ${{inputs.ENVIRONMENT}}.auto.tfvars
            other_vars.auto.tfvars

  validate-terraform:
    needs: [create_tfvars_file, env_to_output]
    if: ${{ inputs.RUN_VALIDATE == 'yes' }}
    uses: cartologyau/srops-github-workflows/.github/workflows/validate-terraform.yml@main
    secrets: inherit
    with:
      tfdirectory: terraform
      tfstatepath: ${{needs.env_to_output.outputs.TF_STATE_PATH }}
      tfstatebucket: "${{ needs.env_to_output.outputs.APP_PROJECT_NAME }}-state"
      apps_service_account: "project-service-account@${{ needs.env_to_output.outputs.APP_PROJECT_NAME }}.iam.gserviceaccount.com"
      apps_identity_provider: "projects/${{ needs.env_to_output.outputs.APP_PROJECT_ID }}/locations/global/workloadIdentityPools/workload-identity-pool/providers/github-actions-provider"
      regula_exclude_rules: "FG_R00420,FG_R00421"

  plan-terraform:
    needs: [create_tfvars_file, env_to_output, validate-terraform]
    if: ${{ always() && !cancelled() && !contains(needs.*.result, 'failure') }}
    uses: cartologyau/srops-github-workflows/.github/workflows/plan-terraform.yml@main
    secrets: inherit
    with:
      env: ${{inputs.ENVIRONMENT}}
      tfdirectory: terraform
      tfstatepath: ${{needs.env_to_output.outputs.TF_STATE_PATH }}
      tfstatebucket: "${{ needs.env_to_output.outputs.APP_PROJECT_NAME }}-state"
      apps_service_account: "project-service-account@${{ needs.env_to_output.outputs.APP_PROJECT_NAME }}.iam.gserviceaccount.com"
      apps_identity_provider: "projects/${{ needs.env_to_output.outputs.APP_PROJECT_ID }}/locations/global/workloadIdentityPools/workload-identity-pool/providers/github-actions-provider"
      deployment_branch: ${{ github.ref }}

  apply-terraform:
    needs: [env_to_output, create_tfvars_file, plan-terraform]
    uses: cartologyau/srops-github-workflows/.github/workflows/deploy-terraform.yml@main
    if: ${{ always() && !cancelled() && !contains(needs.*.result, 'failure') && inputs.DRY_RUN == 'no' }}
    secrets: inherit
    with:
      env: ${{inputs.ENVIRONMENT}}
      tfdirectory: terraform
      tfstatepath: ${{needs.env_to_output.outputs.TF_STATE_PATH }}
      tfstatebucket: "${{ needs.env_to_output.outputs.APP_PROJECT_NAME }}-state"
      apps_service_account: "project-service-account@${{ needs.env_to_output.outputs.APP_PROJECT_NAME }}.iam.gserviceaccount.com"
      apps_identity_provider: "projects/${{ needs.env_to_output.outputs.APP_PROJECT_ID }}/locations/global/workloadIdentityPools/workload-identity-pool/providers/github-actions-provider"
      deployment_branch: ${{ github.ref }}
